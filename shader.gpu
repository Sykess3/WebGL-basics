// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec2 textureCoord;
attribute vec3 normal;

uniform mat4 WorldInverseTranspose;
uniform mat4 ModelViewProjectionMatrix;

uniform vec3 matAmbientColor;
uniform vec3 matDiffuseColor;
uniform vec3 matSpecularColor;
uniform float matShininess;

uniform vec3 lsAmbientColor;
uniform vec3 lsDiffuseColor;
uniform vec3 lsSpecularColor;

uniform vec3 LightDirection;
uniform vec3 CamWorldPosition;

varying vec4 color;
varying vec2 v_texcoord;

void main() {
    vec3 normalInterp = (WorldInverseTranspose * vec4(normalize(normal), 0.0)).xyz;
    vec3 N = normalize(normalInterp);
    vec3 L = normalize(LightDirection);
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);

    vec3 reflectLighDir = normalize(reflect(-L, N)); 
    vec3 camViewDir = normalize(CamWorldPosition - vertex);

    vec3 ambient = matAmbientColor * lsAmbientColor;
    vec3 diffuse = matDiffuseColor * lsDiffuseColor * max(0.0, dot(N, L));
    vec3 specular = matSpecularColor * lsSpecularColor * pow(max(0.0, dot(camViewDir, reflectLighDir)), matShininess);

    color = vec4(ambient + diffuse + specular, 1.0);
    vec2 test = textureCoord;
    v_texcoord = vec2(textureCoord);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec4 color;
uniform sampler2D texture;
varying vec2 v_texcoord;
void main() {
    gl_FragColor = texture2D(texture, v_texcoord);
    //gl_FragColor = vec4(1,1,1,1);
}`;




// Vertex shader
const LineVertexShaderSource = `
attribute vec3 vertex;
uniform mat4 ModelViewProjectionMatrix;

void main() {
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
}`;


// Fragment shader
const LineFragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

uniform vec4 color;
void main() {
    gl_FragColor = color;
}`;